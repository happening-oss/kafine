# This file is automatically generated. Do not edit.
name: kafine
services:
  zookeeper-default:
    container_name: zookeeper-default
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_VERSION}
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "2181:2181"
  kafka-default-101:
    container_name: kafka-default-101
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-default
    environment:
      - KAFKA_BROKER_ID=101
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-default-101:29090,PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-default-101:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-a
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-default:2181
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9092:9092"
  kafka-default-102:
    container_name: kafka-default-102
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-default
    environment:
      - KAFKA_BROKER_ID=102
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-default-102:29090,PLAINTEXT://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-default-102:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-b
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-default:2181
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9093:9093"
  kafka-default-103:
    container_name: kafka-default-103
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-default
    environment:
      - KAFKA_BROKER_ID=103
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-default-103:29090,PLAINTEXT://0.0.0.0:9094
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-default-103:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9094
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-c
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-default:2181
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9094:9094"
  kafka-default-104:
    container_name: kafka-default-104
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-default
    environment:
      - KAFKA_BROKER_ID=104
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-default-104:29090,PLAINTEXT://0.0.0.0:9095
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-default-104:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9095
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-a
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-default:2181
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9095:9095"
  kafka-default-105:
    container_name: kafka-default-105
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-default
    environment:
      - KAFKA_BROKER_ID=105
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-default-105:29090,PLAINTEXT://0.0.0.0:9096
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-default-105:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9096
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-b
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-default:2181
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9096:9096"
  kafka-default-106:
    container_name: kafka-default-106
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-default
    environment:
      - KAFKA_BROKER_ID=106
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-default-106:29090,PLAINTEXT://0.0.0.0:9097
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-default-106:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9097
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-c
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-default:2181
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9097:9097"
  zookeeper-extra:
    container_name: zookeeper-extra
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_VERSION}
    environment:
      - ZOOKEEPER_CLIENT_PORT=2281
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "2281:2281"
  kafka-extra-201:
    container_name: kafka-extra-201
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-extra
    environment:
      - KAFKA_BROKER_ID=201
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-extra-201:29090,PLAINTEXT://0.0.0.0:9192
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-extra-201:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9192
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-c
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-extra:2281
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9192:9192"
  kafka-extra-202:
    container_name: kafka-extra-202
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-extra
    environment:
      - KAFKA_BROKER_ID=202
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-extra-202:29090,PLAINTEXT://0.0.0.0:9193
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-extra-202:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9193
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-c
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-extra:2281
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9193:9193"
  kafka-extra-203:
    container_name: kafka-extra-203
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-extra
    environment:
      - KAFKA_BROKER_ID=203
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-extra-203:29090,PLAINTEXT://0.0.0.0:9194
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-extra-203:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:9194
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK=rack-c
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-extra:2281
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true

          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "9194:9194"
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    environment:
      - SPRING_CONFIG_ADDITIONAL-LOCATION=/kafka-ui.yaml
    ports:
      - "8080:8080"
    volumes:
      - ./kafka-ui.yaml:/kafka-ui.yaml
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.55.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml~:/etc/prometheus/prometheus.yml
  grafana:
    container_name: grafana
    image: grafana/grafana:11.3.0
    ports:
      - "3000:3000"
    environment:
      # Without the following, you have to set a new password every time we redeploy grafana. Annoying.
      # Since the grafana instance isn't public, and doesn't contain anything interesting, anonymous admin is fine.
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      # Data sources (prometheus), etc., go in here.
      - ./grafana/etc/grafana/provisioning:/etc/grafana/provisioning
