COMPOSE_PROJECT_NAME=kafine
export COMPOSE_PROJECT_NAME

CP_ZOOKEEPER_VERSION=7.5.2
export CP_ZOOKEEPER_VERSION

CP_KAFKA_VERSION=7.5.2
export CP_KAFKA_VERSION

# Kafka needs to know which address to "advertise" itself on (this is the address in the various metadata messages).
# It needs to be accessible from the host.
#
# Ideally we'd use the address returned by the following:
#     docker inspect kafka-default-101 | jq -r '.[].NetworkSettings.Networks[].IPAddress'
#
# ...but that won't work, because we need to pass it in an environment variable, which we need to know before the
# container comes up, but we don't know it until the container's up.
#
# ...and it won't work on macOS anyway, afaict.
#
# So we use the host IP address and run each broker on a different port. See 'properties.yaml'.
EXTERNAL_LISTENER_ADDR=$(shell ./get-host-ip.sh)
export EXTERNAL_LISTENER_ADDR

DEFAULT_BROKERS ?= kafka-default-101 kafka-default-102 kafka-default-103
SCALE_BROKERS ?= kafka-default-104 kafka-default-105 kafka-default-106
DEFAULT_SERVICES ?= zookeeper-default $(DEFAULT_BROKERS)

DEFAULT_BOOTSTRAP_BROKER = $(firstword $(DEFAULT_BROKERS))

EXTRA_BROKERS ?= kafka-extra-201 kafka-extra-202 kafka-extra-203
EXTRA_SERVICES ?= zookeeper-extra $(EXTRA_BROKERS)

MONITORING_SERVICES ?= prometheus grafana

up: tls-secrets default-up ui-up

tls-secrets:
	make -C secrets

default-up: docker-compose.yaml jmx
	docker compose up -d $(DEFAULT_SERVICES)

ui-up: kafka-ui.yaml
	docker compose up -d kafka-ui

scale-up: default-up
	docker compose up -d $(SCALE_BROKERS)

scale-down:
	docker compose down $(SCALE_BROKERS)

extra-up: docker-compose.yaml jmx
	docker compose up -d $(EXTRA_SERVICES)

extra-down: docker-compose.yaml
	docker compose down $(EXTRA_SERVICES)

monitoring-up: docker-compose.yaml prometheus.yml~
	docker compose up -d $(MONITORING_SERVICES)

monitoring-down: docker-compose.yaml prometheus.yml~
	docker compose down $(MONITORING_SERVICES)

purge: kill rm

kill:
	docker compose kill

rm:
	docker compose rm -f

# cargo install hbs-cli; only needed to regenerate the (checked-in) yaml files.
HBS_CLI := hbs-cli

# alternatively, use node.js; 'cd scripts; npm i' first.
# HBS_CLI := ./scripts/hbs.js

# Pipe through 'yq' to prettify it.
# Important: use https://github.com/mikefarah/yq, NOT https://kislyuk.github.io/yq/
YQ ?= yq
YQ_ARGS ?= '. head_comment="This file is automatically generated. Do not edit."'

yamls: docker-compose.yaml kafka-ui.yaml prometheus.yml prometheus.yml~

# All of the handlebars-generated files are checked in, because hbs-cli isn't always available. This is OK, because they
# only depend on the properties.

# Note that the handlebars file must come first in the dependencies.
docker-compose.yaml: docker-compose.yaml.handlebars properties.yaml
	$(HBS_CLI) properties.yaml $< | $(YQ) $(YQ_ARGS) > $@

kafka-ui.yaml: kafka-ui.yaml.handlebars properties.yaml
	$(HBS_CLI) properties.yaml $< | $(YQ) $(YQ_ARGS) > $@

prometheus.yml: prometheus.yml.handlebars properties.yaml
	$(HBS_CLI) properties.yaml $< | $(YQ) $(YQ_ARGS) > $@

# Because this file changes based on the host IP, it can't be checked in, and we need to use an intermediate temporary
# file.
prometheus.yml~: prometheus.yml FORCE
	yq '.scrape_configs[1].static_configs[0].targets += "$(EXTERNAL_LISTENER_ADDR):8099"' < prometheus.yml > prometheus.yml~

FORCE: ;

# I don't want to commit the JAR file to the repo, so the 'jmx' target (also referenced above) downloads it.
JMX_PROMETHEUS_VER = 0.19.0

jmx: jmx_prometheus/jmx_prometheus_javaagent-$(JMX_PROMETHEUS_VER).jar

jmx_prometheus/jmx_prometheus_javaagent-$(JMX_PROMETHEUS_VER).jar:
	wget -O $@ https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/$(JMX_PROMETHEUS_VER)/jmx_prometheus_javaagent-$(JMX_PROMETHEUS_VER).jar

create-example-topics:
	scripts/create-example-topics.sh $(DEFAULT_BOOTSTRAP_BROKER)
