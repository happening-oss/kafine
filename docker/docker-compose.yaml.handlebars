name: kafine

services:
{{#each clusters}}
  zookeeper-{{name}}:
    container_name: zookeeper-{{name}}
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_VERSION}
    environment:
      - ZOOKEEPER_CLIENT_PORT={{zookeeper.port}}
      {{#if ../../monitoring_enabled}}
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - ZOOKEEPER_JMX_PORT=9101
      - ZOOKEEPER_JMX_PROMETHEUS_PORT=9102
      - >-
        ZOOKEEPER_JMX_OPTS=-Dcom.sun.management.jmxremote=true
          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
          -javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
      {{/if}}
    volumes:
      - ./jmx_prometheus:/home/prometheus
    ports:
      - "{{zookeeper.port}}:{{zookeeper.port}}"

  {{#each brokers}}
  kafka-{{../name}}-{{id}}:
    container_name: kafka-{{../name}}-{{id}}
    image: confluentinc/cp-kafka:${CP_KAFKA_VERSION}
    depends_on:
      - zookeeper-{{../name}}
    environment:
      - KAFKA_BROKER_ID={{id}}
      # Listen on a docker-internal address, and all-zeros.
      # The EXTERNAL_LISTENER_ADDR must be the host's IP address (run ./get-host-ip.sh)
      - KAFKA_LISTENERS=INTER://kafka-{{../name}}-{{id}}:29090,PLAINTEXT://0.0.0.0:{{port}},SSL://0.0.0.0:{{ssl_port}}
      - KAFKA_ADVERTISED_LISTENERS=INTER://kafka-{{../name}}-{{id}}:29090,PLAINTEXT://${EXTERNAL_LISTENER_ADDR}:{{port}},SSL://${EXTERNAL_LISTENER_ADDR}:{{ssl_port}}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTER:PLAINTEXT,PLAINTEXT:PLAINTEXT,SSL:SSL
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTER
      - KAFKA_SSL_CLIENT_AUTH=required
      - KAFKA_SSL_KEYSTORE_FILENAME=kafka-{{../name}}-{{id}}.keystore.jks
      - KAFKA_SSL_KEYSTORE_CREDENTIALS=kafka-{{../name}}-{{id}}_keystore_creds
      - KAFKA_SSL_TRUSTSTORE_FILENAME=kafka-{{../name}}-{{id}}.truststore.jks
      - KAFKA_SSL_TRUSTSTORE_CREDENTIALS=kafka-{{../name}}-{{id}}_truststore_creds
      - KAFKA_SSL_KEY_CREDENTIALS=kafka-{{../name}}-{{id}}_sslkey_creds
      # The rack-aware selector attempts to spread replicas so that no two replicas are in the same rack.
      - KAFKA_REPLICA_SELECTOR_CLASS=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - KAFKA_BROKER_RACK={{rack}}
      # We connect to ZooKeeper using the docker container name.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-{{../name}}:{{../zookeeper.port}}
      - KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS=6000
      # Don't use quite so much RAM. Default is 1GiB; we'll ask for half that.
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # Don't automatically create topics
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
      # Debug-level logging
      # - KAFKA_LOG4J_ROOT_LOGLEVEL=debug
      {{#if ../../monitoring_enabled}}
      # Monitoring; see https://medium.com/@rramiz.rraza/kafka-metrics-integration-with-prometheus-and-grafana-14fe318fbb8b
      - KAFKA_JMX_PORT=9101
      - >-
        KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote=true
          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -Djava.rmi.server.hostname=localhost
          -Djava.net.preferIPv4Stack=true
      - EXTRA_ARGS=-javaagent:/home/prometheus/jmx_prometheus_javaagent-0.19.0.jar=9102:/home/prometheus/config.yaml
      {{/if}}
    volumes:
      - ./jmx_prometheus:/home/prometheus
      - ./secrets:/etc/kafka/secrets
    ports:
      - "{{port}}:{{port}}"
      - "{{ssl_port}}:{{ssl_port}}"
  {{/each}}
{{/each}}

  kafka-ui:
    container_name: kafka-ui
    image: ghcr.io/kafbat/kafka-ui:v1.2.0
    environment:
      - SPRING_CONFIG_ADDITIONAL-LOCATION=/kafka-ui.yaml
    ports:
      - "8080:8080"
    volumes:
      - ./kafka-ui.yaml:/kafka-ui.yaml

  {{#if monitoring_enabled}}
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.4.2
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml~:/etc/prometheus/prometheus.yml

  grafana:
    container_name: grafana
    image: grafana/grafana:12.0.2
    ports:
      - "3000:3000"
    environment:
      # Without the following, you have to set a new password every time we redeploy grafana. Annoying.
      # Since the grafana instance isn't public, and doesn't contain anything interesting, anonymous admin is fine.
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      # Data sources (prometheus), etc., go in here.
      - ./grafana/etc/grafana/provisioning:/etc/grafana/provisioning
  {{/if}}
